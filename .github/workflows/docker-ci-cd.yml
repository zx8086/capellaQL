name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write
  packages: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDX_NO_DEFAULT_LOAD: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # Enhanced metadata handling
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zx8086/capellaql
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Set build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Pre-cleanup
        run: |
          docker system prune -a -f
          docker builder prune -a -f
        continue-on-error: true

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-false}
          ENABLE_OPENTELEMETRY=${ENABLE_OPENTELEMETRY:-false}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
          SOURCE_MAP_SUPPORT=${{ vars.SOURCE_MAP_SUPPORT }}
          PRESERVE_SOURCE_MAPS=${{ vars.PRESERVE_SOURCE_MAPS }}
          EOF

      # Enhanced Snyk security checks
      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true
          platforms: linux/arm64,linux/amd64

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          cache-to: |
            type=registry,ref=zx8086/capellaql:buildcache,mode=max
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '0.0.1' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Build local image for testing
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: zx8086/capellaql:latest
          platforms: linux/arm64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '2.0.0' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      # Enhanced container testing with health check
      - name: Test container
        continue-on-error: true
        if: github.event_name != 'pull_request'
        run: |
          docker ps -q --filter publish=4000 | xargs -r docker stop
          docker rm -f app-test 2>/dev/null || true
          docker run -d \
            --name app-test \
            -p 4000:4000 \
            --env-file .env \
            -e NODE_ENV=production \
            -e BUILD_VERSION=${{ github.ref_name || '0.0.1' }} \
            -e COMMIT_HASH=${{ github.sha }} \
            -e BUILD_DATE=${{ env.BUILD_TIMESTAMP }} \
            zx8086/capellaql:latest

          # Wait for container to start
          sleep 10

          # Check if container is running
          docker ps | grep app-test || (docker logs app-test && exit 1)

          # Health check verification
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' app-test 2>/dev/null || echo "none")
          echo "Container health status: $HEALTH_STATUS"

          if [ "$HEALTH_STATUS" = "none" ]; then
            echo "Health check not configured, skipping health verification"
          elif [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "Container health check failed"
            docker logs app-test
            exit 1
          fi

          # Additional container verification
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' app-test)
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Container is not running. Status: $CONTAINER_STATUS"
            docker logs app-test
            exit 1
          fi

          echo "Container successfully started and healthy"

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/capellaql:latest
          docker history zx8086/capellaql:latest

      # Enhanced Snyk container scanning
      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker images
          snyk container test zx8086/capellaql:latest \
            --file=Dockerfile \
            --severity-threshold=high \
            --sarif-file-output=snyk-docker.sarif \
            --platform=linux/arm64 || true
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            snyk container monitor zx8086/capellaql:latest \
              --file=Dockerfile \
              --platform=linux/arm64 || true
          fi

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Build Summary
        if: always()
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build Version: ${{ github.ref_name || '0.0.1' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 Build Date: ${{ env.BUILD_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 👤 Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📍 Environment: ${{ vars.DEPLOYMENT_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Base URL: ${{ vars.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚪 Port: ${{ vars.PORT }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ Build Duration: ${{ steps.build-time.outputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔍 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "snyk.sarif" ]; then
            VULN_COUNT=$(grep -c "issue" snyk.sarif || echo "0")
            HIGH_VULN_COUNT=$(grep -c '"level":"high"' snyk.sarif || echo "0")
            MEDIUM_VULN_COUNT=$(grep -c '"level":"medium"' snyk.sarif || echo "0")
            LOW_VULN_COUNT=$(grep -c '"level":"low"' snyk.sarif || echo "0")
            echo "- 🛡️ Code Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            echo "  - High: ${HIGH_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Medium: ${MEDIUM_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Low: ${LOW_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Total: ${VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🛡️ No code security scan results available" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk-docker.sarif" ]; then
            CONTAINER_VULN_COUNT=$(grep -c "issue" snyk-docker.sarif || echo "0")
            CONTAINER_HIGH_VULN_COUNT=$(grep -c '"level":"high"' snyk-docker.sarif || echo "0")
            CONTAINER_MEDIUM_VULN_COUNT=$(grep -c '"level":"medium"' snyk-docker.sarif || echo "0")
            CONTAINER_LOW_VULN_COUNT=$(grep -c '"level":"low"' snyk-docker.sarif || echo "0")
            echo "- 🐳 Container Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            echo "  - High: ${CONTAINER_HIGH_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Medium: ${CONTAINER_MEDIUM_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Low: ${CONTAINER_LOW_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "  - Total: ${CONTAINER_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🐳 No container security scan results available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🐳 Docker Image Details" >> $GITHUB_STEP_SUMMARY
          if docker image inspect zx8086/capellaql:latest >/dev/null 2>&1; then
            SIZE=$(docker image inspect zx8086/capellaql:latest --format='{{.Size}}')
            SIZE_MB=$((SIZE/1024/1024))
            LAYERS=$(docker image inspect zx8086/capellaql:latest --format='{{len .RootFS.Layers}}')
            CREATED=$(docker image inspect zx8086/capellaql:latest --format='{{.Created}}')
            echo "- 📦 Image Size: ${SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Tags: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📚 Number of Layers: ${LAYERS}" >> $GITHUB_STEP_SUMMARY
            echo "- 🕒 Created: ${CREATED}" >> $GITHUB_STEP_SUMMARY
            echo "- 🏗️ Build Platform: $(docker image inspect zx8086/capellaql:latest --format='{{.Os}}/{{.Architecture}}')" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Docker image not available" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.event_name != 'pull_request' }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🧪 Container Test Results" >> $GITHUB_STEP_SUMMARY
            if docker ps | grep app-test; then
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' app-test 2>/dev/null || echo "unknown")
              STARTED_AT=$(docker inspect --format='{{.State.StartedAt}}' app-test)
              CONTAINER_IP=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' app-test)
              echo "- ✅ Container Status: Running" >> $GITHUB_STEP_SUMMARY
              echo "- 🏥 Health Status: ${HEALTH_STATUS}" >> $GITHUB_STEP_SUMMARY
              echo "- 🕒 Started At: ${STARTED_AT}" >> $GITHUB_STEP_SUMMARY
              echo "- 🌐 Container IP: ${CONTAINER_IP}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Container Stats:" >> $GITHUB_STEP_SUMMARY
              docker stats app-test --no-stream --format "  - CPU: {{.CPUPerc}}  RAM: {{.MemUsage}}" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ Container Test Failed or Not Run" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 System Information" >> $GITHUB_STEP_SUMMARY
          echo "- 💻 Runner: ${{ runner.os }} (${{ runner.arch }})" >> $GITHUB_STEP_SUMMARY
          echo "- 💾 Disk Space:" >> $GITHUB_STEP_SUMMARY
          df -h / | tail -n 1 | awk '{print "  - Used: " $3 " Free: " $4 " Total: " $2}' >> $GITHUB_STEP_SUMMARY
          echo "- 🧮 Memory Usage:" >> $GITHUB_STEP_SUMMARY
          free -h | awk 'NR==2{print "  - Used: " $3 " Free: " $4 " Total: " $2}' >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Node Environment: ${{ vars.NODE_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 OpenTelemetry: ${{ vars.ENABLE_OPENTELEMETRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Logging Enabled: ${{ vars.ENABLE_FILE_LOGGING }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Log Level: ${{ vars.LOG_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Cache TTL: ${{ vars.YOGA_RESPONSE_CACHE_TTL }}" >> $GITHUB_STEP_SUMMARY

          if [ -d "node_modules" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- 📚 Total Dependencies: $(ls -1 node_modules | wc -l)" >> $GITHUB_STEP_SUMMARY
            echo "- 💾 Dependencies Size: $(du -sh node_modules | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi

      # Enhanced cleanup with workspace cleaning
      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          docker builder prune -a -f
          # Additional workspace cleanup
          rm -rf node_modules
          rm -rf .gradle
          rm -rf build
          echo "Cleanup completed"
