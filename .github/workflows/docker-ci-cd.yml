name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # QEMU setup for multi-architecture builds (Added from standard workflow)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Build timestamp (Added from standard workflow)
      - name: Set build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
          EOF

      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Docker layer cache (Added from standard workflow)
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            zx8086/capellaql:latest
            zx8086/capellaql:${{ github.sha }}
          platforms: linux/arm64,linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '0.0.1' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            # [Your existing build args...]

      # Container test (Added from standard workflow)
      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          # Stop existing containers using port 4000
          docker ps -q --filter publish=4000 | xargs -r docker stop

          # Remove existing container with same name if exists
          docker rm -f app-test 2>/dev/null || true

          # Run new container
          docker run -d \
            --name app-test \
            -p 4000:4000 \
            -e NODE_ENV=production \
            -e BUILD_VERSION=${{ github.ref_name || '0.0.1' }} \
            -e COMMIT_HASH=${{ github.sha }} \
            -e BUILD_DATE=${{ env.BUILD_TIMESTAMP }} \
            zx8086/capellaql:latest

          # Wait for container to be healthy
          sleep 10

          # Verify container is running
          docker ps | grep app-test || (docker logs app-test && exit 1)

      - name: Run Snyk to check Docker image for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test zx8086/capellaql:latest --severity-threshold=high --sarif-file-output=snyk-docker.sarif --debug || true
          snyk container monitor zx8086/capellaql:latest || true

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"
