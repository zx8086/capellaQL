name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write
  packages: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDX_NO_DEFAULT_LOAD: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # Enhanced metadata handling
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zx8086/capellaql
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Set build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Pre-cleanup
        run: |
          docker system prune -a -f
          docker builder prune -a -f
        continue-on-error: true

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
          SOURCE_MAP_SUPPORT=${{ vars.SOURCE_MAP_SUPPORT }}
          PRESERVE_SOURCE_MAPS=${{ vars.PRESERVE_SOURCE_MAPS }}
          EOF

      # Enhanced Snyk security checks
      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true
          platforms: linux/arm64,linux/amd64

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          cache-to: |
            type=registry,ref=zx8086/capellaql:buildcache,mode=max
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '0.0.1' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Build local image for testing
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: zx8086/capellaql:latest
          platforms: linux/arm64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '2.0.0' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      # Enhanced container testing with health check
      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          docker ps -q --filter publish=4000 | xargs -r docker stop
          docker rm -f app-test 2>/dev/null || true
          docker run -d \
            --name app-test \
            -p 4000:4000 \
            -e NODE_ENV=production \
            -e BUILD_VERSION=${{ github.ref_name || '0.0.1' }} \
            -e COMMIT_HASH=${{ github.sha }} \
            -e BUILD_DATE=${{ env.BUILD_TIMESTAMP }} \
            --health-cmd="curl -f http://localhost:4000/health || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            zx8086/capellaql:latest
          sleep 10
          docker ps | grep app-test || (docker logs app-test && exit 1)

          # Additional health check verification
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' app-test)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            docker logs app-test
            exit 1
          fi

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/capellaql:latest
          docker history zx8086/capellaql:latest

      # Enhanced Snyk container scanning
      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker images
          snyk container test zx8086/capellaql:latest \
            --file=Dockerfile \
            --severity-threshold=high \
            --sarif-file-output=snyk-docker.sarif \
            --platform=linux/arm64 || true
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            snyk container monitor zx8086/capellaql:latest \
              --file=Dockerfile \
              --platform=linux/arm64 || true
          fi

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      # Enhanced cleanup with workspace cleaning
      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          docker builder prune -a -f
          # Additional workspace cleanup
          rm -rf node_modules
          rm -rf .gradle
          rm -rf build
          echo "Cleanup completed"
