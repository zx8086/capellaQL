name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write
  packages: write

env:
  DOCKER_BUILDKIT: 1
  BUILDX_EXPERIMENTAL: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDX_NO_DEFAULT_LOAD: true
  DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      # Initial Setup
      - name: Set build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-false}
          ENABLE_OPENTELEMETRY=${ENABLE_OPENTELEMETRY:-false}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
          SOURCE_MAP_SUPPORT=${{ vars.SOURCE_MAP_SUPPORT }}
          PRESERVE_SOURCE_MAPS=${{ vars.PRESERVE_SOURCE_MAPS }}
          EOF

      # Docker metadata setup
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zx8086/capellaql
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      # Platform and runtime setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      # Security scanning section
      - name: Run Snyk code scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          bun run snyk monitor --file=package.json

      - name: Upload Snyk code scan results
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      # Pre-build cleanup
      - name: Pre-build cleanup
        run: |
          docker system prune -a -f
          docker builder prune -a -f
        continue-on-error: true

      # Docker build and push section
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true
          platforms: linux/arm64,linux/amd64

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          provenance: true
          sbom: true
          attests: |
            type=provenance,mode=max
            type=sbom
            type=vuln
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          cache-to: |
            type=registry,ref=zx8086/capellaql:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BUILD_VERSION=${{ github.ref_name || '0.0.1' }}
            COMMIT_HASH=${{ github.sha }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Verify image attestations
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Wait for image to be available
          sleep 10

          # Extract and verify provenance
          docker buildx imagetools inspect zx8086/capellaql:latest \
            --format "{{ json .attestations }}" > attestations.json

          # Check if provenance exists
          if jq -e '.provenance' attestations.json > provenance.json; then
            echo "Verifying provenance..."
            jq -e '.predicate.buildType == "https://mobyproject.org/buildkit@v1"' provenance.json || echo "Warning: Build type verification failed"
            jq -e '.predicate.materials[].uri' provenance.json || echo "Warning: Materials verification failed"
          else
            echo "Warning: No provenance attestation found"
          fi

      - name: Verify SBOM
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Extract and verify SBOM
          docker buildx imagetools inspect zx8086/capellaql:latest \
            --format "{{ json .sbom }}" > sbom.json || echo "Warning: SBOM extraction failed"

          if [ -f "sbom.json" ]; then
            jq -e '.' sbom.json > /dev/null && echo "SBOM verification successful" || echo "Warning: Invalid SBOM format"
          fi

      - name: Verify vulnerability scan
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Extract and verify vulnerability scan
          docker buildx imagetools inspect zx8086/capellaql:latest \
            --format "{{ json .vulns }}" > vulns.json || echo "Warning: Vulnerability scan extraction failed"

          if [ -f "vulns.json" ]; then
            jq -e '.' vulns.json > /dev/null && echo "Vulnerability scan verification successful" || echo "Warning: Invalid vulnerability scan format"
          fi

      # Generate build record during build
      - name: Generate Docker Build Record
        if: success()
        run: |
          BUILD_RECORD_FILE="docker-build-records/zx8086-capellaql-${GITHUB_SHA::8}.dockerbuild"
          mkdir -p docker-build-records

          cat << EOF > "${BUILD_RECORD_FILE}"
          {
            "id": "${GITHUB_SHA}",
            "name": "capellaQL",
            "status": "completed",
            "cached": false,
            "duration": $(date +%s),
            "build_inputs": {
              "build-args": {
                "NODE_ENV": "production",
                "BUILD_VERSION": "${GITHUB_REF_NAME:-0.0.1}",
                "COMMIT_HASH": "${GITHUB_SHA}",
                "BUILD_DATE": "${BUILD_TIMESTAMP}"
              },
              "context": ".",
              "platforms": ["linux/arm64", "linux/amd64"],
              "push": ${{ github.event_name != 'pull_request' }},
              "tags": ${{ toJSON(steps.meta.outputs.tags) }},
              "cache-from": ["type=registry,ref=zx8086/capellaql:buildcache"],
              "cache-to": ["type=registry,ref=zx8086/capellaql:buildcache,mode=max"]
            },
            "metadata": {
              "repository": "${GITHUB_REPOSITORY}",
              "workflow": "${GITHUB_WORKFLOW}",
              "run_id": "${GITHUB_RUN_ID}",
              "actor": "${GITHUB_ACTOR}",
              "ref": "${GITHUB_REF_NAME}",
              "sha": "${GITHUB_SHA}"
            }
          }
          EOF

      - name: Upload Build Record
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-records
          path: docker-build-records/
          retention-days: 90

      # Testing section
      - name: Build local image for testing
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: zx8086/capellaql:latest
          platforms: linux/arm64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '2.0.0' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          # Stop existing containers using port 4000
          docker ps -q --filter publish=4000 | xargs -r docker stop
          docker rm -f app-test 2>/dev/null || true

          # Run new container with all necessary environment variables
          docker run -d \
            --name app-test \
            -p 4000:4000 \
            --env-file .env \
            -e NODE_ENV=production \
            -e BUILD_VERSION=${{ github.ref_name || '0.0.1' }} \
            -e COMMIT_HASH=${{ github.sha }} \
            -e BUILD_DATE=${{ env.BUILD_TIMESTAMP }} \
            -e ENABLE_OPENTELEMETRY=false \
            -e TRACES_ENDPOINT=http://localhost:4318/v1/traces \
            -e METRICS_ENDPOINT=http://localhost:4318/v1/metrics \
            -e LOGS_ENDPOINT=http://localhost:4318/v1/logs \
            zx8086/capellaql:latest

          # Wait for container to start and verify
          sleep 10
          docker ps | grep app-test || (docker logs app-test && exit 1)

          # Check container health
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' app-test)
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Container is not running. Status: $CONTAINER_STATUS"
            docker logs app-test
            exit 1
          fi

          echo "Container successfully started"

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/capellaql:latest
          docker history zx8086/capellaql:latest

      # Container security scanning
      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker images
          snyk container test zx8086/capellaql:latest \
            --file=Dockerfile \
            --severity-threshold=high \
            --sarif-file-output=snyk-docker.sarif \
            --platform=linux/arm64 || true
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            snyk container monitor zx8086/capellaql:latest \
              --file=Dockerfile \
              --platform=linux/arm64 || true
          fi

      - name: Upload Docker Snyk scan results
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      # Build summary
      - name: Docker Build Summary
        if: always()
        run: |
          echo "### 🏗️ Docker Build Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Information
          echo "#### 🔨 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Platforms: linux/arm64, linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Builder: ${{ steps.buildx.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Push Enabled: ${{ github.event_name != 'pull_request' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Tags:" >> $GITHUB_STEP_SUMMARY
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "  - ${tag}" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

          # Environment Information
          echo "#### 🌍 Environment Details" >> $GITHUB_STEP_SUMMARY
          echo "- 🔰 Node Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "- 📍 Deployment Environment: ${DEPLOYMENT_ENVIRONMENT:-development}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Base URL: ${BASE_URL:-http://localhost}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚪 Port: ${PORT:-4000}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Log Level: ${LOG_LEVEL:-info}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 OpenTelemetry: ${ENABLE_OPENTELEMETRY:-false}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 File Logging: ${ENABLE_FILE_LOGGING:-false}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Args
          echo "#### 🏗️ Build Arguments" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Build Version: ${{ github.ref_name || '0.0.1' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Commit Hash: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 Build Date: ${{ env.BUILD_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Source Maps: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Cache Information
          echo "#### 💾 Cache Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- 📥 Cache From: type=registry,ref=zx8086/capellaql:buildcache" >> $GITHUB_STEP_SUMMARY
          echo "- 📤 Cache To: type=registry,ref=zx8086/capellaql:buildcache,mode=max" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Status and Timing
          echo "#### ⚙️ Build Statistics" >> $GITHUB_STEP_SUMMARY
          BUILD_START_TIME=$(date -d "${{ env.BUILD_TIMESTAMP }}" +%s)
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))

          echo "- ⏱️ Total Duration: ${BUILD_DURATION}s" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Start Time: ${{ env.BUILD_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏁 End Time: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY

          if [ -f "buildx.log" ]; then
            BUILD_DURATION=$(grep "duration:" buildx.log | awk '{print $2}')
            CACHE_HITS=$(grep "cache hits:" buildx.log | awk '{print $3}')
            echo "- 🎯 Cache Hits: ${CACHE_HITS:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- 🏗️ Build Duration: ${BUILD_DURATION:-N/A}" >> $GITHUB_STEP_SUMMARY
          fi

          # Container Status
          echo "#### 🐳 Container Status" >> $GITHUB_STEP_SUMMARY
          if docker ps | grep app-test >/dev/null 2>&1; then
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' app-test)
            CONTAINER_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' app-test 2>/dev/null || echo "N/A")
            CONTAINER_STARTED=$(docker inspect --format='{{.State.StartedAt}}' app-test)
            echo "- ✅ Status: ${CONTAINER_STATUS}" >> $GITHUB_STEP_SUMMARY
            echo "- 🏥 Health: ${CONTAINER_HEALTH}" >> $GITHUB_STEP_SUMMARY
            echo "- 🕒 Started: ${CONTAINER_STARTED}" >> $GITHUB_STEP_SUMMARY

            # Add container resource usage
            CONTAINER_STATS=$(docker stats app-test --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.NetIO}},{{.BlockIO}}")
            IFS=',' read -r CPU MEM NET BLOCK <<< "$CONTAINER_STATS"
            echo "- 📊 Resource Usage:" >> $GITHUB_STEP_SUMMARY
            echo "  - CPU: ${CPU}" >> $GITHUB_STEP_SUMMARY
            echo "  - Memory: ${MEM}" >> $GITHUB_STEP_SUMMARY
            echo "  - Network I/O: ${NET}" >> $GITHUB_STEP_SUMMARY
            echo "  - Block I/O: ${BLOCK}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Image Details
          echo "#### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          if docker image inspect zx8086/capellaql:latest >/dev/null 2>&1; then
            IMAGE_SIZE=$(docker image inspect zx8086/capellaql:latest --format='{{.Size}}')
            IMAGE_SIZE_MB=$((IMAGE_SIZE/1024/1024))
            LAYER_COUNT=$(docker image inspect zx8086/capellaql:latest --format='{{len .RootFS.Layers}}')
            CREATED=$(docker image inspect zx8086/capellaql:latest --format='{{.Created}}')

            echo "- 📦 Size: ${IMAGE_SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
            echo "- 📚 Layers: ${LAYER_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 Created: ${CREATED}" >> $GITHUB_STEP_SUMMARY
            echo "- 🏗️ Architecture: $(docker image inspect zx8086/capellaql:latest --format='{{.Os}}/{{.Architecture}}')" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security Scan Results
          echo "#### 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "snyk-docker.sarif" ]; then
              VULN_COUNT=$(grep -c "issue" snyk-docker.sarif || echo "0")
              CRITICAL_VULN_COUNT=$(grep -c '"level":"critical"' snyk-docker.sarif || echo "0")
              HIGH_VULN_COUNT=$(grep -c '"level":"high"' snyk-docker.sarif || echo "0")
              MEDIUM_VULN_COUNT=$(grep -c '"level":"medium"' snyk-docker.sarif || echo "0")
              LOW_VULN_COUNT=$(grep -c '"level":"low"' snyk-docker.sarif || echo "0")

              echo "##### 🛡️ Docker Image Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              echo "- 💀 Critical: ${CRITICAL_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ High: ${HIGH_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ⚡ Medium: ${MEDIUM_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ℹ️ Low: ${LOW_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Total: ${VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
          else
              echo "- ℹ️ No Docker image vulnerability scan results available" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk.sarif" ]; then
              CODE_VULN_COUNT=$(grep -c "issue" snyk.sarif || echo "0")
              CODE_CRITICAL_VULN_COUNT=$(grep -c '"level":"critical"' snyk.sarif || echo "0")
              CODE_HIGH_VULN_COUNT=$(grep -c '"level":"high"' snyk.sarif || echo "0")
              CODE_MEDIUM_VULN_COUNT=$(grep -c '"level":"medium"' snyk.sarif || echo "0")
              CODE_LOW_VULN_COUNT=$(grep -c '"level":"low"' snyk.sarif || echo "0")

              echo "" >> $GITHUB_STEP_SUMMARY
              echo "##### 🔍 Code Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              echo "- 💀 Critical: ${CODE_CRITICAL_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ High: ${CODE_HIGH_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ⚡ Medium: ${CODE_MEDIUM_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- ℹ️ Low: ${CODE_LOW_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Total: ${CODE_VULN_COUNT}" >> $GITHUB_STEP_SUMMARY
          else
              echo "- ℹ️ No code vulnerability scan results available" >> $GITHUB_STEP_SUMMARY
          fi

          # Additional Security Information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##### 🔐 Security Configurations" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Snyk Severity Threshold: high" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Scan Type: Container & Code" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Continuous Monitoring: $([ "${{ github.ref }}" == "refs/heads/master" ] && echo "Enabled" || echo "Disabled")" >> $GITHUB_STEP_SUMMARY

          # Security Recommendations
          if [ $((HIGH_VULN_COUNT + CODE_HIGH_VULN_COUNT)) -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Security Recommendations**" >> $GITHUB_STEP_SUMMARY
            echo "- High severity vulnerabilities detected. Review security scan reports." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build Record
          echo "#### 📋 Build Record" >> $GITHUB_STEP_SUMMARY
          echo "- 🆔 Build ID: ${GITHUB_RUN_ID}" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Repository: ${GITHUB_REPOSITORY}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Workflow: ${GITHUB_WORKFLOW}" >> $GITHUB_STEP_SUMMARY
          echo "- 👤 Triggered by: ${GITHUB_ACTOR}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌿 Branch: ${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 Run Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📥 Docker Build Record Download" >> $GITHUB_STEP_SUMMARY
          echo "Download the build record to view detailed build information in Docker Desktop:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the Actions tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Select this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Download the \`docker-build-records\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "4. Import the .dockerbuild file into Docker Desktop's Builds view" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Enhanced cleanup with workspace cleaning
      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          docker builder prune -a -f
          # Additional workspace cleanup
          rm -rf node_modules
          rm -rf .gradle
          rm -rf build
          echo "Cleanup completed"
