name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write
  packages: write

env:
  DOCKER_BUILDKIT: 1
  BUILDX_EXPERIMENTAL: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDX_NO_DEFAULT_LOAD: true
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDKIT_PROGRESS: plain
  DOCKER_BUILDKIT_CACHE: 1
  CACHE_FROM: type=registry,ref=zx8086/capellaql:buildcache
  CACHE_TO: type=registry,ref=zx8086/capellaql:buildcache,mode=max
  BUILDX_CACHE_TTL: "168h"
  BUILDX_MAX_PARALLEL: "4"
  BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
  BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      # Initial Setup
      - name: Set build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-false}
          ENABLE_OPENTELEMETRY=${ENABLE_OPENTELEMETRY:-false}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
          SOURCE_MAP_SUPPORT=${{ vars.SOURCE_MAP_SUPPORT }}
          PRESERVE_SOURCE_MAPS=${{ vars.PRESERVE_SOURCE_MAPS }}
          EOF

      # Docker metadata setup
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zx8086/capellaql
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      # Platform and runtime setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      # Security scanning section
      - name: Run Snyk code scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          bun run snyk monitor --file=package.json

      - name: Upload Snyk code scan results
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      # Pre-build cleanup and cache warmup
      - name: Pre-build cleanup
        run: |
          docker system prune -a -f
          docker builder prune -a -f
        continue-on-error: true

      # Docker build and push section
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true
          platforms: linux/arm64,linux/amd64

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Warm up Docker cache
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: false
          platforms: linux/arm64,linux/amd64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
            type=gha,scope=${{ github.workflow }}
          cache-to: |
            type=gha,mode=max,scope=${{ github.workflow }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          provenance: true
          sbom: true
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
          cache-to: |
            type=registry,ref=zx8086/capellaql:buildcache,mode=max
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1
            NODE_ENV=production
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BUILD_VERSION=${{ github.ref_name || '0.0.1' }}
            COMMIT_HASH=${{ github.sha }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Capture Build Output
        run: |
          echo "::group::Docker Build Output"
          docker buildx build \
            --progress=plain \
            --load \
            . 2>&1 | tee buildx.log
          echo "::endgroup::"

      - name: Process Build Log
        if: always()
        run: |
          if [ -f "buildx.log" ]; then
            echo "Processing build log..."
            # Extract cache information
            CACHE_HITS=$(grep -c "CACHED" buildx.log || echo "0")
            CACHE_MISSES=$(grep -c "DONE" buildx.log || echo "0")
            TOTAL_STEPS=$(grep -c "DONE\|CACHED" buildx.log || echo "0")

            # Calculate cache ratio
            if [ "$TOTAL_STEPS" -gt "0" ]; then
              CACHE_RATIO=$((CACHE_HITS * 100 / TOTAL_STEPS))
            else
              CACHE_RATIO=0
            fi

            echo "CACHE_HITS=${CACHE_HITS}" >> $GITHUB_ENV
            echo "CACHE_MISSES=${CACHE_MISSES}" >> $GITHUB_ENV
            echo "CACHE_RATIO=${CACHE_RATIO}" >> $GITHUB_ENV

            # Extract build duration
            BUILD_DURATION=$(grep "time=" buildx.log | tail -n1 | grep -oE 'time=[0-9]+\.[0-9]+' | cut -d= -f2)
            echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV

            # Save log summary
            echo "Build completed with ${CACHE_HITS} cache hits and ${CACHE_MISSES} cache misses"
            echo "Cache hit ratio: ${CACHE_RATIO}%"
            echo "Total build time: ${BUILD_DURATION}s"
          else
            echo "No build log file found"
          fi

      - name: Verify image manifest
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Wait for image to be available
          sleep 10

          # Check manifest
          docker buildx imagetools inspect zx8086/capellaql:latest --format '{{json .}}' > manifest.json

          if [ -f "manifest.json" ]; then
            echo "Checking manifest structure..."
            jq -e '.manifests[0].Attestations' manifest.json && echo "Attestations found" || echo "Warning: No attestations in manifest"
          else
            echo "Warning: Could not fetch manifest"
          fi

      - name: Verify image attestations
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Wait for image to be available
          sleep 10

          # Extract and verify provenance
          docker buildx imagetools inspect zx8086/capellaql:latest \
            --format '{{range $i, $p := index .Manifests 0.Attestations "https://mobyproject.org/buildkit/provenance@v0.1"}}{{if eq $i 0}}{{json .}}{{end}}{{end}}' > provenance.json || echo "Warning: Unable to extract provenance"

          if [ -f "provenance.json" ]; then
            echo "Verifying provenance..."
            jq -e '.predicateType == "https://slsa.dev/provenance/v0.2"' provenance.json || echo "Warning: Invalid predicate type"
            jq -e '.predicate.builder.id' provenance.json || echo "Warning: Missing builder ID"
            jq -e '.predicate.buildType' provenance.json || echo "Warning: Missing build type"
          else
            echo "Warning: No provenance found"
          fi

      - name: Verify SBOM
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Extract and verify SBOM
          docker buildx imagetools inspect zx8086/capellaql:latest \
            --format '{{range $i, $p := index .Manifests 0.Attestations "https://spdx.dev/Document"}}{{if eq $i 0}}{{json .}}{{end}}{{end}}' > sbom.json || echo "Warning: SBOM extraction failed"

          if [ -f "sbom.json" ]; then
            jq -e '.' sbom.json > /dev/null && echo "SBOM verification successful" || echo "Warning: Invalid SBOM format"
          fi

      # Generate build record during build
      - name: Generate Docker Build Record
        if: success()
        run: |
          BUILD_RECORD_FILE="docker-build-records/zx8086-capellaql-${GITHUB_SHA::8}.dockerbuild"
          mkdir -p docker-build-records

          cat << EOF > "${BUILD_RECORD_FILE}"
          {
            "id": "${GITHUB_SHA}",
            "name": "capellaQL",
            "status": "completed",
            "cached": false,
            "duration": $(date +%s),
            "cache_metrics": {
              "hits": ${CACHE_HITS:-0},
              "misses": ${CACHE_MISSES:-0},
              "ratio": ${CACHE_RATIO:-0}
            },
            "build_inputs": {
              "build-args": {
                "NODE_ENV": "production",
                "BUILD_VERSION": "${GITHUB_REF_NAME:-0.0.1}",
                "COMMIT_HASH": "${GITHUB_SHA}",
                "BUILD_DATE": "${BUILD_TIMESTAMP}"
              },
              "context": ".",
              "platforms": ["linux/arm64", "linux/amd64"],
              "push": ${{ github.event_name != 'pull_request' }},
              "tags": ${{ toJSON(steps.meta.outputs.tags) }},
              "cache-from": ["type=registry,ref=zx8086/capellaql:buildcache"],
              "cache-to": ["type=registry,ref=zx8086/capellaql:buildcache,mode=max"]
            },
            "metadata": {
              "repository": "${GITHUB_REPOSITORY}",
              "workflow": "${GITHUB_WORKFLOW}",
              "run_id": "${GITHUB_RUN_ID}",
              "actor": "${GITHUB_ACTOR}",
              "ref": "${GITHUB_REF_NAME}",
              "sha": "${GITHUB_SHA}"
            }
          }
          EOF

      - name: Upload Build Record
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-records
          path: docker-build-records/
          retention-days: 90

      # Testing section
      - name: Build local image for testing
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: zx8086/capellaql:latest
          platforms: linux/arm64
          cache-from: |
            type=registry,ref=zx8086/capellaql:buildcache
            type=gha,scope=${{ github.workflow }}
            type=local,src=/tmp/.buildx-cache
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name || '2.0.0' }}
            COMMIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_TIMESTAMP }}
            BASE_URL=${{ vars.BASE_URL }}
            PORT=${{ vars.PORT }}
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=${{ vars.BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS }}
            SOURCE_MAP_SUPPORT=true
            PRESERVE_SOURCE_MAPS=true

      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          # Stop existing containers using port 4000
          docker ps -q --filter publish=4000 | xargs -r docker stop
          docker rm -f app-test 2>/dev/null || true

          # Run new container with all necessary environment variables
          docker run -d \
            --name app-test \
            -p 4000:4000 \
            --env-file .env \
            -e NODE_ENV=production \
            -e BUILD_VERSION=${{ github.ref_name || '0.0.1' }} \
            -e COMMIT_HASH=${{ github.sha }} \
            -e BUILD_DATE=${{ env.BUILD_TIMESTAMP }} \
            -e ENABLE_OPENTELEMETRY=false \
            -e TRACES_ENDPOINT=http://localhost:4318/v1/traces \
            -e METRICS_ENDPOINT=http://localhost:4318/v1/metrics \
            -e LOGS_ENDPOINT=http://localhost:4318/v1/logs \
            zx8086/capellaql:latest

            # # Verify file structure
            # echo "Verifying container file structure..."
            # docker exec app-test ls -la /app
            # docker exec app-test ls -la /app/src

            # # Verify bun installation
            # echo "Verifying bun installation..."
            # docker exec app-test bun --version

            # # Verify package.json
            # echo "Verifying package.json..."
            # docker exec app-test cat /app/package.json

          # Wait for container to start and verify
          sleep 10
          docker ps | grep app-test || (docker logs app-test && exit 1)

          # Check container health and capture metrics
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' app-test)
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Container is not running. Status: $CONTAINER_STATUS"
            docker logs app-test
            exit 1
          fi

          # Capture container metrics for summary
          echo "CONTAINER_STATUS=${CONTAINER_STATUS}" >> $GITHUB_ENV
          echo "CONTAINER_START_TIME=$(docker inspect --format='{{.State.StartedAt}}' app-test)" >> $GITHUB_ENV

          echo "Container successfully started"

      - name: Inspect Docker image
        id: inspect
        run: |
          # Capture image details for summary
          echo "IMAGE_SIZE=$(docker image inspect zx8086/capellaql:latest --format='{{.Size}}')" >> $GITHUB_ENV
          echo "LAYER_COUNT=$(docker image inspect zx8086/capellaql:latest --format='{{len .RootFS.Layers}}')" >> $GITHUB_ENV

          docker image inspect zx8086/capellaql:latest
          docker history zx8086/capellaql:latest

      # Container security scanning
      - name: Run Snyk container scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker images
          snyk container test zx8086/capellaql:latest \
            --file=Dockerfile \
            --severity-threshold=high \
            --sarif-file-output=snyk-docker.sarif \
            --platform=linux/arm64 || true
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            snyk container monitor zx8086/capellaql:latest \
              --file=Dockerfile \
              --platform=linux/arm64 || true
          fi

      - name: Upload Docker Snyk scan results
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      # Optimized Build Summary
      - name: Docker Build Summary
        if: always()
        run: |
          {
            # Header
            echo "### 🐳 Docker Build Summary"
            echo ""

            # Build Overview (combined metrics)
            echo "#### 📊 Build Overview"
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| 🆔 Build ID | \`${GITHUB_SHA::7}\` |"
            echo "| 📦 Image | capellaQL |"
            echo "| ⚡ Status | ${CONTAINER_STATUS:-N/A} |"
            echo "| ⏱️ Duration | ${BUILD_DURATION:-N/A}s |"
            echo "| 💾 Cache Hits | ${CACHE_HITS:-0} |"
            echo "| 🔄 Cache Misses | ${CACHE_MISSES:-0} |"
            echo "| 📊 Cache Ratio | ${CACHE_RATIO:-0}% |"
            echo "| 📚 Total Layers | ${LAYER_COUNT:-N/A} |"
            echo "| 📦 Image Size | $((${IMAGE_SIZE:-0}/1024/1024))MB |"

            # Cache Analysis (enhanced)
            echo ""
            echo "#### 🔍 Cache Performance"
            echo "\`\`\`"
            echo "Cache Hit Rate: ${CACHE_RATIO}%"
            echo "Layers Reused: ${CACHE_HITS}"
            echo "Layers Rebuilt: ${CACHE_MISSES}"
            echo "Cache Efficiency Score: $(( (CACHE_HITS * 100) / (CACHE_HITS + CACHE_MISSES) ))/100"
            echo "\`\`\`"

            # Build Performance (combined timing metrics)
            echo ""
            echo "#### 📈 Build Performance"
            echo "\`\`\`"
            echo "Start Time: $(date -d @$BUILD_START_TIME +'%Y-%m-%d %H:%M:%S UTC')"
            echo "End Time: $(date -d @$BUILD_END_TIME +'%Y-%m-%d %H:%M:%S UTC')"
            echo "Duration: ${BUILD_DURATION}s"
            echo "Average Layer Build Time: $(( BUILD_DURATION / (CACHE_HITS + CACHE_MISSES) ))s"
            echo "\`\`\`"

            # Layer Analysis
            echo ""
            echo "#### 📚 Layer Analysis"
            echo "\`\`\`"
            docker history zx8086/capellaql:latest --format "table {{.CreatedBy}}\t{{.Size}}\t{{.Comment}}" 2>/dev/null || echo "Layer history not available"
            echo "\`\`\`"

            # Resource Usage (if available)
            if docker stats --no-stream >/dev/null 2>&1; then
              echo ""
              echo "#### 🔋 Resource Usage"
              echo "\`\`\`"
              docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" 2>/dev/null
              echo "\`\`\`"
            fi

            # Container Status (enhanced)
            echo ""
            echo "#### 🐳 Container Status"
            if [ "${CONTAINER_STATUS:-}" = "running" ]; then
              STATS=$(docker stats app-test --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.NetIO}},{{.BlockIO}}")
              IFS=',' read -r CPU MEM NET BLOCK <<< "$STATS"
              echo "- Status: ✅ Running"
              echo "- Start Time: ${CONTAINER_START_TIME}"
              echo "- CPU Usage: ${CPU}"
              echo "- Memory Usage: ${MEM}"
              echo "- Network I/O: ${NET}"
              echo "- Block I/O: ${BLOCK}"
            else
              echo "- Status: ⚠️ Not Running"
            fi

            # Security Scan Results (combined)
            echo ""
            echo "#### 🔒 Security Scan Results"
            if [ -f "snyk-docker.sarif" ]; then
              VULN_COUNT=$(grep -c "issue" snyk-docker.sarif || echo "0")
              CRITICAL_COUNT=$(grep -c '"level":"critical"' snyk-docker.sarif || echo "0")
              HIGH_COUNT=$(grep -c '"level":"high"' snyk-docker.sarif || echo "0")
              MEDIUM_COUNT=$(grep -c '"level":"medium"' snyk-docker.sarif || echo "0")
              LOW_COUNT=$(grep -c '"level":"low"' snyk-docker.sarif || echo "0")

              echo "##### 🛡️ Container Vulnerabilities"
              echo "- 💀 Critical: ${CRITICAL_COUNT}"
              echo "- ⚠️ High: ${HIGH_COUNT}"
              echo "- ⚡ Medium: ${MEDIUM_COUNT}"
              echo "- ℹ️ Low: ${LOW_COUNT}"
              echo "- 📊 Total: ${VULN_COUNT}"
            fi

            # Code Vulnerabilities
            if [ -f "snyk.sarif" ]; then
              CODE_VULN_COUNT=$(grep -c "issue" snyk.sarif || echo "0")
              CODE_CRITICAL_COUNT=$(grep -c '"level":"critical"' snyk.sarif || echo "0")
              CODE_HIGH_COUNT=$(grep -c '"level":"high"' snyk.sarif || echo "0")
              CODE_MEDIUM_COUNT=$(grep -c '"level":"medium"' snyk.sarif || echo "0")
              CODE_LOW_COUNT=$(grep -c '"level":"low"' snyk.sarif || echo "0")

              echo ""
              echo "##### 🔍 Code Vulnerabilities"
              echo "- 💀 Critical: ${CODE_CRITICAL_COUNT}"
              echo "- ⚠️ High: ${CODE_HIGH_COUNT}"
              echo "- ⚡ Medium: ${CODE_MEDIUM_COUNT}"
              echo "- ℹ️ Low: ${CODE_LOW_COUNT}"
              echo "- 📊 Total: ${CODE_VULN_COUNT}"
            fi

            # Environment Information
            echo ""
            echo "#### 🌍 Environment Details"
            echo "- 🔰 Node Environment: production"
            echo "- 📍 Deployment: ${DEPLOYMENT_ENVIRONMENT:-development}"
            echo "- 🌐 Base URL: ${BASE_URL:-http://localhost}"
            echo "- 🚪 Port: ${PORT:-4000}"
            echo "- 📝 Log Level: ${LOG_LEVEL:-info}"
            echo "- 🔄 OpenTelemetry: ${ENABLE_OPENTELEMETRY:-false}"
            echo "- 📊 File Logging: ${ENABLE_FILE_LOGGING:-false}"

            # Build Configuration
            echo ""
            echo "#### ⚙️ Build Configuration"
            echo "- 📋 Version: ${{ github.ref_name || '0.0.1' }}"
            echo "- 🔄 Commit: ${GITHUB_SHA}"
            echo "- 📅 Date: ${BUILD_TIMESTAMP}"
            echo "- 🛠️ Workflow: ${GITHUB_WORKFLOW}"
            echo "- 👤 Actor: ${GITHUB_ACTOR}"
            echo "- 🌿 Branch: ${GITHUB_REF_NAME}"

            # Build Artifacts
            echo ""
            echo "#### 📦 Artifacts"
            echo "- Build Record: \`docker-build-records/zx8086-capellaql-${GITHUB_SHA::8}.dockerbuild\`"
            echo "- SBOM: Available in image attestations"
            echo "- Provenance: Included in image metadata"

            # Optimization Recommendations
            echo ""
            echo "#### 💡 Build Optimization Recommendations"
            if [ $CACHE_RATIO -lt 50 ]; then
              echo "⚠️ Low cache hit ratio detected. Consider:"
              echo "- Reviewing Dockerfile layer ordering"
              echo "- Implementing better cache strategies"
              echo "- Checking for unnecessary cache invalidation"
            else
              echo "✅ Build cache is performing well with ${CACHE_RATIO}% hit rate"
            fi
          } >> $GITHUB_STEP_SUMMARY

      # Enhanced cleanup with workspace cleaning
      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          rm -rf /tmp/.buildx-cache
          docker container rm -f app-test || true
          docker image prune -f
          docker volume prune -f
          docker builder prune -a -f
          rm -rf node_modules
          rm -rf .gradle
          rm -rf build
          echo "Cleanup completed"
