name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ github.repository }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ github.repository }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          BASE_URL=${{ vars.BASE_URL }}
          PORT=${{ vars.PORT }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }}
          COUCHBASE_URL=${{ secrets.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          EOF

      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker buildx build \
            --push \
            --target release \
            --parallel \
            -t zx8086/capellaql:latest \
            --build-arg BASE_URL=${{ vars.BASE_URL }} \
            --build-arg PORT=${{ vars.PORT }} \
            --build-arg LOG_LEVEL=${{ vars.LOG_LEVEL }} \
            --build-arg LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }} \
            --build-arg LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }} \
            --build-arg YOGA_RESPONSE_CACHE_TTL=${{ vars.YOGA_RESPONSE_CACHE_TTL }} \
            --build-arg COUCHBASE_URL=${{ secrets.COUCHBASE_URL }} \
            --build-arg COUCHBASE_USERNAME=${{ secrets.COUCHBASE_USERNAME }} \
            --build-arg COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }} \
            --build-arg COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }} \
            --build-arg COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }} \
            --build-arg COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }} \
            --build-arg SERVICE_NAME=${{ vars.SERVICE_NAME }} \
            --build-arg SERVICE_VERSION=${{ vars.SERVICE_VERSION }} \
            --build-arg DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }} \
            --build-arg TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }} \
            --build-arg METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }} \
            --build-arg LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }} \
            --build-arg METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }} \
            --build-arg CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }} \
            --build-arg ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }} \
            --build-arg ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }} \
            --build-arg SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }} \
            --build-arg ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }} \
            .

      # New step to verify the Docker image
      - name: Verify Docker image
        run: docker image ls zx8086/capellaql:latest

      # New step to explicitly pull the Docker image
      - name: Pull Docker image
        run: docker pull zx8086/capellaql:latest

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          bun run snyk container test zx8086/capellaql:latest --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk-docker.sarif --production

      # Updated step for Snyk monitor
      - name: Run Snyk monitor for Docker image
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          bun run snyk container monitor zx8086/capellaql:latest --file=Dockerfile || true

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      # - name: Deploy container
      #   run: |
      #     docker stop capellaql || true
      #     docker rm capellaql || true
      #     docker run -d --name capellaql \
      #       -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
      #       --env-file .env \
      #       zx8086/capellaql:latest

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"
